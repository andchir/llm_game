name: Deploy Python Server

on:
  push:
    branches:
      - main
      - 'issue-**'  # Allow testing on issue branches
    paths:
      - 'server/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.dockerignore'
      - '.github/workflows/deploy-server.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Python Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test server imports
        run: |
          python -c "from server.game_server import GameState, Player, Bullet; print('Server imports successfully')"

      - name: Check server can start (dry run)
        run: |
          timeout 5s python server/game_server.py || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
          echo "Server started successfully"

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Display container information
        run: |
          echo "## üê≥ Docker Container Built Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The server has been packaged into a Docker container and pushed to GitHub Container Registry." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Container Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ghcr.io" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: \`latest\`, \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Quick Deploy Options" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Option 1: Run Locally with Docker" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Option 2: Deploy to Render.com (from GitHub Container Registry)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "1. Go to https://render.com" >> $GITHUB_STEP_SUMMARY
          echo "2. New ‚Üí Web Service ‚Üí Deploy an existing image" >> $GITHUB_STEP_SUMMARY
          echo "3. Image URL: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "4. Port: 8080" >> $GITHUB_STEP_SUMMARY
          echo "5. Deploy!" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Option 3: Deploy to Railway.app" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "1. Go to https://railway.app" >> $GITHUB_STEP_SUMMARY
          echo "2. New Project ‚Üí Deploy from Registry" >> $GITHUB_STEP_SUMMARY
          echo "3. Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "4. Auto-deploys on new images!" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Option 4: Deploy to Fly.io" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Create fly.toml with image reference" >> $GITHUB_STEP_SUMMARY
          echo "flyctl launch --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "flyctl deploy" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Container is automatically rebuilt on every push to main branch" >> $GITHUB_STEP_SUMMARY
          echo "- Image is publicly accessible from GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "- Server listens on port set by \`PORT\` environment variable (default: 8080)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìö Full documentation: [DOCKER_DEPLOYMENT.md](https://github.com/${{ github.repository }}/blob/main/DOCKER_DEPLOYMENT.md)" >> $GITHUB_STEP_SUMMARY

  deploy-render:
    name: Deploy to Render (Optional)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Render
        env:
          RENDER_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          if [ -n "$RENDER_HOOK" ]; then
            echo "Triggering deployment to Render.com..."
            curl -X POST "$RENDER_HOOK"
            echo "‚úÖ Deployment triggered on Render.com"
          else
            echo "‚ÑπÔ∏è  RENDER_DEPLOY_HOOK_URL not configured. Skipping automatic deployment."
            echo "   You can deploy manually using the Docker image from GitHub Container Registry."
          fi
        continue-on-error: true
